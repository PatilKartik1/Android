AndroidManifest.xml

<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>


<application>

<service android:name=".DownloadService"/>


activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="20dp"
    android:gravity="center">

    <Button
        android:id="@+id/btnDownload"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Download File"/>

    <TextView
        android:id="@+id/txtStatus"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Status: Waiting"
        android:textSize="18sp"
        android:paddingTop="20dp"/>

</LinearLayout>


MainActivity.java

package com.example.downloadservice;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private TextView txtStatus;
    private static final String DOWNLOAD_COMPLETE = "com.example.DOWNLOAD_COMPLETE";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        txtStatus = findViewById(R.id.txtStatus);
        Button btnDownload = findViewById(R.id.btnDownload);

        btnDownload.setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, DownloadService.class);
            startService(intent);
            txtStatus.setText("Status: Downloading...");
        });

        // Register BroadcastReceiver to listen for download completion
        registerReceiver(downloadReceiver, new IntentFilter(DOWNLOAD_COMPLETE));
    }

    // BroadcastReceiver to update UI when download is complete
    private final BroadcastReceiver downloadReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            txtStatus.setText("Status: Download Complete!");
            Toast.makeText(context, "File Downloaded Successfully!", Toast.LENGTH_LONG).show();
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(downloadReceiver);
    }
}


DownloadService.java

package com.example.downloadservice;

import android.app.Service;
import android.content.Intent;
import android.os.Environment;
import android.os.IBinder;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class DownloadService extends Service {

    private static final String FILE_URL = "https://example.com/sample.pdf"; // Replace with your file URL
    private static final String FILE_NAME = "downloaded_file.pdf";

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        new Thread(() -> downloadFile()).start();
        return START_STICKY;
    }

    private void downloadFile() {
        try {
            URL url = new URL(FILE_URL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.connect();

            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                stopSelf();
                return;
            }

            InputStream inputStream = new BufferedInputStream(connection.getInputStream());
            File outputFile = new File(getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), FILE_NAME);
            FileOutputStream outputStream = new FileOutputStream(outputFile);

            byte[] data = new byte[1024];
            int count;
            while ((count = inputStream.read(data)) != -1) {
                outputStream.write(data, 0, count);
            }

            outputStream.flush();
            outputStream.close();
            inputStream.close();

            // Send broadcast when download is complete
            Intent broadcastIntent = new Intent("com.example.DOWNLOAD_COMPLETE");
            sendBroadcast(broadcastIntent);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}


